{"version":3,"sources":["athens/devcards/blocks.cljs"],"mappings":"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","names":["devcards.core/register-card","devcards.core/card-base","athens.devcards.blocks/datoms","js/athens","js/athens.devcards","js/athens.devcards.blocks","js/athens.devcards.blocks.conn","athens.devcards.blocks/conn","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","athens.db/schema","posh.reagent/posh!","posh.reagent/transact!","js/athens.devcards.blocks.t_athens$devcards$blocks50796","athens.devcards.blocks/t_athens$devcards$blocks50796","_50798","meta50797","cljs.core/PROTOCOL_SENTINEL","this__47891__auto__","devcard-opts__47892__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__47910__auto__","cljs.core/fn?","data-atom__47911__auto__","owner__47912__auto__","reagent.core/as-element","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.blocks/->t_athens$devcards$blocks50796","athens.style/base-styles","athens.devcards.blocks/+gray-circle","athens.lib.dom.attributes.with_styles.cljs$core$IFn$_invoke$arity$variadic","athens.style/+flex-center","athens.devcards.blocks/+black-circle","athens.lib.dom.attributes.with_styles.cljs$core$IFn$_invoke$arity$1","athens.devcards.blocks/toggle","dbid","open?","G__50800","G__50801","cljs.core/not","athens.devcards.blocks/block-el","block","map__50802","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","uid","string","open","children","and__4174__auto__","cljs.core/seq","closed?","athens.style/+flex-column","js/module$node_modules$$material_ui$icons$index.KeyboardArrowRight","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","athens.lib.dom.attributes.with_attributes.cljs$core$IFn$_invoke$arity$variadic","athens.router/navigate-page","iter__4582__auto__","s__50806","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__50808","cljs.core/chunk-buffer","i__50807","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50805","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","child","athens.devcards.blocks/block-component","conn","ident","posh.reagent/pull","athens.db/block-pull-pattern","cljs.core/deref","athens.db/sort-block","js/athens.devcards.blocks.t_athens$devcards$blocks50809","athens.devcards.blocks/t_athens$devcards$blocks50809","_50811","meta50810","athens.devcards.blocks/->t_athens$devcards$blocks50809","js/athens.devcards.blocks.t_athens$devcards$blocks50812","athens.devcards.blocks/t_athens$devcards$blocks50812","_50814","meta50813","athens.devcards.blocks/->t_athens$devcards$blocks50812","js/athens.devcards.blocks.t_athens$devcards$blocks50815","athens.devcards.blocks/t_athens$devcards$blocks50815","_50817","meta50816","athens.devcards.blocks/->t_athens$devcards$blocks50815","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.lib.dom.attributes :refer [with-styles with-attributes]]\n    [athens.router :refer [navigate-page]]\n    [athens.style :refer [base-styles +flex-column +flex-center]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [datascript.core :as d]\n    [devcards.core :refer-macros [defcard defcard-rg]]\n    [posh.reagent :refer [transact! posh! pull]]))\n\n;; DATA\n\n(defcard Instantiate-Dsdb)\n\n\n(def datoms\n  [{:db/id          2381,\n    :block/uid      \"OaSVyM_nr\",\n    :block/open     true,\n    :node/title     \"Athens FAQ\",\n    :block/children [{:db/id          2158,\n                      :block/uid      \"BjIm6GeRP\",\n                      :block/string   \"Why open-source?\",\n                      :block/open     true,\n                      :block/order    3,\n                      :block/children [{:db/id        2163,\n                                        :block/uid    \"GNaf3XzpE\",\n                                        :block/string \"The short answer is the security and privacy of your data.\",\n                                        :block/open   true,\n                                        :block/order  1}\n                                       {:db/id          2347,\n                                        :block/uid      \"jbiKpcmIX\",\n                                        :block/string   \"Firstly, I wouldn't be surprised if Roam was eventually open-sourced.\",\n                                        :block/open     true,\n                                        :block/order    0,\n                                        :block/children [{:db/id        2176,\n                                                          :block/uid    \"gVINXaN8Y\",\n                                                          :block/string \"Suffice it to say that Roam being open-source is undeniably something that the team has already considered. Why is it not open-source already? You'd have to ask the Roam team, but Roam, a business, is not obligated to open-source anything.\",\n                                                          :block/open   true,\n                                                          :block/order  2}\n                                                         {:db/id          2346,\n                                                          :block/uid      \"ZOxwo0K_7\",\n                                                          :block/string   \"The conclusion of the [[Roam White Paper]] states that Roam's vision is a collective, \\\"open-source\\\" intelligence.\",\n                                                          :block/open     true,\n                                                          :block/order    0,\n                                                          :block/children [{:db/id        2174,\n                                                                            :block/uid    \"WKWPPSYQa\",\n                                                                            :block/string \"((iWmBJaChO))\",\n                                                                            :block/open   true,\n                                                                            :block/order  0}]}\n                                                         {:db/id        2349,\n                                                          :block/uid    \"VQ-ybRmNh\",\n                                                          :block/string \"In the Roam Slack, I recall Conor saying one eventual goal is to work on a protocol that affords interoperability between open source alternatives. I would share the message but can't find it because of Slack's 10k message limit.\",\n                                                          :block/open   true,\n                                                          :block/order  1}\n                                                         {:db/id        2351,\n                                                          :block/uid    \"PGGS8MFH_\",\n                                                          :block/string \"Ultimately, we don't know when/if Roam will be open-sourced, but it's possible that Athens could accelerate or catalyze this. Regardless, there will always be some who are open-source maximalists and some who want to self-host, because that's probably really the most secure thing you can do (if you know what you're doing).\",\n                                                          :block/open   true,\n                                                          :block/order  3}]}]}]}])\n\n\n(defonce conn (d/create-conn db/schema))\n(posh! conn)\n(transact! conn datoms)\n\n\n;; CSS ;;\n\n(defcard-rg Import-Styles\n  [base-styles])\n\n\n(def +gray-circle\n  (with-styles +flex-center\n    {:height 12 :width 12 :margin-right 5 :margin-top 5 :border-radius \"50%\" :cursor \"pointer\"}))\n\n\n(def +black-circle\n  (with-styles {:height           5 :width 5 :border-radius \"50%\" :cursor \"pointer\" :display \"inline-block\"\n                :background-color \"black\" :vertical-align \"middle\"}))\n\n\n;; HELPERS ;;\n(defn toggle\n  [dbid open?]\n  (transact! conn [{:db/id dbid :block/open (not open?)}]))\n\n\n(declare block-component)\n\n\n;; COMPONENTS ;;\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [{:block/keys [uid string open children] dbid :db/id} block\n        open?   (and (seq children) open)\n        closed? (and (seq children) (not open))]\n    [:div +flex-column\n     [:div {:style {:display \"flex\"}}\n      (cond\n        open? [:> mui-icons/KeyboardArrowRight {:style {:cursor \"pointer\"} :on-click #(toggle dbid open)}]\n        closed? [:> mui-icons/KeyboardArrowDown {:style {:cursor \"pointer\"} :on-click #(toggle dbid open)}]\n        :else [:span {:style {:width 10}}])\n      [:span (with-styles +gray-circle {:background-color (if closed? \"lightgray\" nil)})\n       [:span (with-attributes +black-circle {:on-click #(navigate-page uid)})]]\n      [:span string]\n      ;; TODO parse-and-render will break because it uses rfee/href\n      ;;[:span (parse-and-render string)]\n      ]\n     (when open?\n       (for [child (:block/children block)]\n         [:div {:style {:margin-left 28} :key (:db/id child)}\n          [block-el child]]))]))\n\n\n(defn block-component\n  \"This query is long because I'm not sure how to recursively find all child blocks with all attributes\n  '[* {:block/children [*]}] doesn't work\nAlso, why does datascript return a reaction of {:db/id nil} when pulling for [:block/uid uid]?\nno results for q returns nil\nno results for pull eid returns nil\n  \"\n  [conn ident]\n  (let [block (->> @(pull conn db/block-pull-pattern ident)\n                   (db/sort-block))]\n    [block-el block]))\n\n\n(defcard-rg Block\n  \"Pull entity 2347, a block within Athens FAQ, and its children. Doesn't pull parents, unlike `block-page`\"\n  [block-component conn 2347])\n\n\n(defcard-rg Block-Embed\n  \"TODO\")\n\n\n(defcard-rg Transclusion\n  \"TODO\")\n"]}
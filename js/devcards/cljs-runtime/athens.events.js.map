{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__47646__auto__","result__47647__auto__","debux.common.util/send-trace!","e","e119975","_","athens.db/rfdb","db","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","G__119976","G__119977","re-frame.core/reg-fx","p__119978","map__119979","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","method","opts","on-success","on-failure","c__39615__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__39616__auto__","switch__39592__auto__","state_120023","state_val_120024","inst_119990","inst_119992","inst_119993","statearr-120025","statearr-120026","statearr-120027","G__120028","cljs.core/Keyword","statearr-120029","statearr-120030","statearr-120031","statearr-120032","js/Error","statearr-120033","statearr-120034","inst_120003","statearr-120035","statearr-120036","inst_120013","inst_120015","inst_120016","statearr-120037","statearr-120038","statearr-120041","inst_119987","inst_119988","cljs.core.async.impl.ioc-helpers/take!","inst_120021","cljs.core.async.impl.ioc-helpers/return-chan","statearr-120044","statearr-120047","statearr-120050","inst_120008","statearr-120053","inst_120011","inst_120012","statearr-120056","statearr-120057","statearr-120060","inst_120006","statearr-120063","statearr-120064","inst_120018","inst_120019","statearr-120067","inst_119995","inst_119996","inst_119997","inst_119998","inst_119999","statearr-120068","statearr-120069","statearr-120070","state-machine__39593__auto__","ret-value__39594__auto__","result__39595__auto__","cljs.core/keyword-identical?","e120071","js/Object","ex__39596__auto__","statearr-120072","cljs.core.async.impl.ioc-helpers/process-exception","state__39617__auto__","statearr-120073","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs-http.client/post","cljs-http.client/get","cljs-http.client/put","cljs-http.client/delete","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__120076","G__120077","timers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p__120078","map__120079","action","id","event","wait","G__120085","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/setTimeout","js/clearTimeout","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","athens.db/athens-url","G__120097","G__120098","re-posh.core/reg-event-ds","p__120100","vec__120103","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__120111","e120109","e120116","p__120117","vec__120118","json-str","datascript.core.reset_conn_BANG_.cljs$core$IFn$_invoke$arity$2","athens.db/dsdb","datascript.core/empty-db","athens.db/schema","athens.db/str-to-db-tx","G__120125","G__120126","p__120128","vec__120129","e120132","p__120137","vec__120138","_event","eid","open-state","athens.events/node-with-title","ds","title","G__120141","G__120142","G__120143","datascript.core/q","athens.events/referencing-blocks","G__120144","G__120145","G__120146","athens.patterns/linked","p__120147","vec__120148","athens.events/rename-refs-tx","old-title","new-title","s","new-s","clojure.string/replace","athens.events/rename-tx","blocks","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__120180","re-posh.core/inject-cofx","p__120181","p__120182","map__120183","vec__120184","e120189","p__120190","p__120191","map__120192","vec__120193","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","athens.events/count-children","G__120197","G__120198","G__120199","athens.events/get-children-eids","G__120200","G__120201","G__120202","athens.events/move-blocks-tx","from-title","to-title","block-count","block-eids","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","order","G__120203","G__120204","G__120205","datascript.core/pull","G__120206","p__120207","p__120208","map__120209","vec__120210","e120214","p__120233","p__120234","map__120235","vec__120236","primary-title","secondary-title","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","p__120240","map__120241","e120243","p__120244","map__120245","e120247","error","cljs.core/assoc-in","e120248","e120249","athens.events/boot-flow","e120250"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [athens.patterns :as patterns]\n    [cljs-http.client :as http]\n    [cljs.core.async :refer [go <!]]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :as rf :refer [dispatch reg-fx reg-event-db reg-event-fx]]\n    [re-posh.core :as rp :refer [reg-event-ds]]))\n\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :toggle-athena\n  (fn [db _]\n    (assoc db :athena (not (:athena db)))))\n\n\n(reg-fx\n  :http\n  (fn [{:keys [url method opts on-success on-failure]}]\n    (go\n      (let [http-fn (case method\n                      :post http/post :get http/get\n                      :put http/put :delete http/delete)\n            res     (<! (http-fn url opts))\n            {:keys [success body] :as all} res]\n        (if success\n          (dispatch (conj on-success body))\n          (dispatch (conj on-failure all)))))))\n\n\n(reg-fx\n  :timeout\n  (let [timers (atom {})]\n    (fn [{:keys [action id event wait]}]\n      (case action\n        :start (swap! timers assoc id (js/setTimeout #(dispatch event) wait))\n        :clear (do (js/clearTimeout (get @timers id))\n                   (swap! timers dissoc id))))))\n\n\n(reg-event-fx\n  :get-datoms\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:parse-datoms]\n            :on-failure [:alert-failure]}}))\n\n\n(reg-event-ds\n  :parse-datoms\n  (fn-traced [_ [_ json-str]]\n             (d/reset-conn! db/dsdb (d/empty-db db/schema)) ;; TODO: refactor to an effect\n             (db/str-to-db-tx json-str)))\n\n\n(reg-event-ds\n  :block/toggle-open\n  (fn-traced [_ [_event eid open-state]]\n             [[:db/add eid :block/open (not open-state)]]))\n\n\n(defn node-with-title\n  [ds title]\n  (d/q '[:find ?e .\n         :in $ ?title\n         :where [?e :node/title ?title]]\n       ds title))\n\n\n(defn referencing-blocks\n  [ds title]\n  (d/q '[:find ?e ?s\n         :in $ ?regex\n         :where\n         [?e :block/string ?s]\n         [(re-find ?regex ?s)]]\n       ds (patterns/linked title)))\n\n\n(defn rename-refs-tx\n  [old-title new-title [eid s]]\n  (let [new-s (str/replace\n                s\n                (patterns/linked old-title)\n                (str \"$1$3$4\" new-title \"$2$5\"))]\n    [:db/add eid :block/string new-s]))\n\n\n(defn rename-tx\n  [ds old-title new-title]\n  (let [eid (node-with-title ds old-title)\n        blocks (referencing-blocks ds old-title)]\n    (->> blocks\n         (map (partial rename-refs-tx old-title new-title))\n         (into [[:db/add eid :node/title new-title]]))))\n\n\n(reg-event-fx\n  :node/renamed\n  [(rp/inject-cofx :ds)]\n  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n             (when (not= old-title new-title)\n               (if (node-with-title ds new-title)\n                 {:db (assoc db :merge-prompt {:active true\n                                               :old-title old-title\n                                               :new-title new-title})\n                  :timeout {:action :start\n                            :id :merge-prompt\n                            :wait 7000\n                            :event [:node/merge-canceled]}}\n                 {:transact (rename-tx ds old-title new-title)}))))\n\n\n(defn count-children\n  [ds title]\n  (d/q '[:find (count ?children) .\n         :in $ ?title\n         :where [?e :node/title ?title]\n         [?e :block/children ?children]]\n       ds title))\n\n\n(defn get-children-eids\n  [ds title]\n  (d/q '[:find [?children ...]\n         :in $ ?title\n         :where [?e :node/title ?title]\n         [?e :block/children ?children]]\n       ds title))\n\n\n(defn move-blocks-tx\n  [ds from-title to-title]\n  (let [block-count (count-children ds to-title)\n        block-eids (get-children-eids ds from-title)]\n    (mapcat (fn [eid]\n              (let [order (:block/order (d/pull ds [:block/order] eid))]\n                [[:db/add [:node/title to-title] :block/children eid]\n                 [:db/add eid :block/order (+ order block-count)]]))\n            block-eids)))\n\n\n(reg-event-fx\n  :node/merged\n  [(rp/inject-cofx :ds)]\n  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n             {:db (dissoc db :merge-prompt)\n              :timeout {:action :clear\n                        :id :merge-prompt}\n              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n                                (move-blocks-tx ds secondary-title primary-title)\n                                (rename-tx ds primary-title secondary-title))}))\n\n\n(reg-event-fx\n  :node/merge-canceled\n  (fn-traced [{:keys [db]} _]\n             {:db (dissoc db :merge-prompt)\n              :timeout {:action :clear\n                        :id :merge-prompt}}))\n\n\n(reg-event-db\n  :alert-failure\n  (fn-traced [db error]\n             (assoc-in db [:errors] error)))\n\n\n(reg-event-db\n  :clear-errors\n  (fn-traced [db]\n             (assoc-in db [:errors] {})))\n\n\n(reg-event-db\n  :clear-loading\n  (fn-traced [db]\n             (assoc-in db [:loading] false)))\n\n\n(defn boot-flow\n  []\n  {:first-dispatch\n   [:get-datoms]\n   :rules [{:when :seen? :events :parse-datoms :dispatch [:clear-loading] :halt? true}\n           {:when :seen? :events :api-request-error :dispatch [:alert-failure \"Boot Error\"] :halt? true}]})\n\n\n(reg-event-fx\n  :boot\n  (fn-traced [_ _]\n             {:async-flow (boot-flow)}))\n"]}